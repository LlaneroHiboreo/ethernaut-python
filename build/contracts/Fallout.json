{
  "abi": [
    {
      "inputs": [],
      "name": "Fal1out",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allocate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "allocator",
          "type": "address"
        }
      ],
      "name": "allocatorBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectAllocations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "allocator",
          "type": "address"
        }
      ],
      "name": "sendAllocation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "/Users/blackshuck/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/utils/math/SafeMath.sol",
    "2": "contracts/ethernaut_fallout.sol"
  },
  "ast": {
    "absolutePath": "contracts/ethernaut_fallout.sol",
    "exportedSymbols": {
      "Fallout": [
        252
      ],
      "SafeMath": [
        564
      ]
    },
    "id": 253,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 139,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:2"
      },
      {
        "absolutePath": "/Users/blackshuck/.brownie/packages/OpenZeppelin/openzeppelin-contracts@4.5.0/contracts/utils/math/SafeMath.sol",
        "file": "@openzeppelin/contracts/utils/math/SafeMath.sol",
        "id": 140,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 253,
        "sourceUnit": 565,
        "src": "57:57:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "Fallout",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 252,
        "linearizedBaseContracts": [
          252
        ],
        "name": "Fallout",
        "nameLocation": "125:7:2",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "global": false,
            "id": 143,
            "libraryName": {
              "id": 141,
              "name": "SafeMath",
              "nameLocations": [
                "145:8:2"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 564,
              "src": "145:8:2"
            },
            "nodeType": "UsingForDirective",
            "src": "139:27:2",
            "typeName": {
              "id": 142,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "158:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "constant": false,
            "id": 147,
            "mutability": "mutable",
            "name": "allocations",
            "nameLocation": "199:11:2",
            "nodeType": "VariableDeclaration",
            "scope": 252,
            "src": "171:39:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 146,
              "keyType": {
                "id": 144,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "179:7:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "171:27:2",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 145,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "190:7:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "functionSelector": "8da5cb5b",
            "id": 149,
            "mutability": "mutable",
            "name": "owner",
            "nameLocation": "239:5:2",
            "nodeType": "VariableDeclaration",
            "scope": 252,
            "src": "216:28:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address_payable",
              "typeString": "address payable"
            },
            "typeName": {
              "id": 148,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "216:15:2",
              "stateMutability": "payable",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 167,
              "nodeType": "Block",
              "src": "307:84:2",
              "statements": [
                {
                  "expression": {
                    "id": 158,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 152,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 149,
                      "src": "317:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 155,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "333:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 156,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "337:6:2",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "333:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 154,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "325:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_payable_$",
                          "typeString": "type(address payable)"
                        },
                        "typeName": {
                          "id": 153,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "325:8:2",
                          "stateMutability": "payable",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 157,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "325:19:2",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "317:27:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "id": 159,
                  "nodeType": "ExpressionStatement",
                  "src": "317:27:2"
                },
                {
                  "expression": {
                    "id": 165,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 160,
                        "name": "allocations",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 147,
                        "src": "354:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 162,
                      "indexExpression": {
                        "id": 161,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 149,
                        "src": "366:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "354:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 163,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "375:3:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 164,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "379:5:2",
                      "memberName": "value",
                      "nodeType": "MemberAccess",
                      "src": "375:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "354:30:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 166,
                  "nodeType": "ExpressionStatement",
                  "src": "354:30:2"
                }
              ]
            },
            "functionSelector": "6fab5ddf",
            "id": 168,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "Fal1out",
            "nameLocation": "282:7:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 150,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "289:2:2"
            },
            "returnParameters": {
              "id": 151,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "307:0:2"
            },
            "scope": 252,
            "src": "273:118:2",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 179,
              "nodeType": "Block",
              "src": "418:83:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 174,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 171,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "436:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 172,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "440:6:2",
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "436:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 173,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 149,
                          "src": "450:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "436:19:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "63616c6c6572206973206e6f7420746865206f776e6572",
                        "id": 175,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "457:25:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_98821890c044d63947a93cf48b7df1f5a42f89e719dd7abbb581002b013b02f4",
                          "typeString": "literal_string \"caller is not the owner\""
                        },
                        "value": "caller is not the owner"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_98821890c044d63947a93cf48b7df1f5a42f89e719dd7abbb581002b013b02f4",
                          "typeString": "literal_string \"caller is not the owner\""
                        }
                      ],
                      "id": 170,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "428:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 176,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "428:55:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 177,
                  "nodeType": "ExpressionStatement",
                  "src": "428:55:2"
                },
                {
                  "id": 178,
                  "nodeType": "PlaceholderStatement",
                  "src": "493:1:2"
                }
              ]
            },
            "id": 180,
            "name": "onlyOwner",
            "nameLocation": "406:9:2",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 169,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "415:2:2"
            },
            "src": "397:104:2",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 197,
              "nodeType": "Block",
              "src": "542:81:2",
              "statements": [
                {
                  "expression": {
                    "id": 195,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 183,
                        "name": "allocations",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 147,
                        "src": "552:11:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 186,
                      "indexExpression": {
                        "expression": {
                          "id": 184,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "564:3:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 185,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "568:6:2",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "564:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "552:23:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 192,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "606:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 193,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "610:5:2",
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "606:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "baseExpression": {
                            "id": 187,
                            "name": "allocations",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 147,
                            "src": "578:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 190,
                          "indexExpression": {
                            "expression": {
                              "id": 188,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "590:3:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 189,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "594:6:2",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "590:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "578:23:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 191,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "602:3:2",
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 428,
                        "src": "578:27:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 194,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "578:38:2",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "552:64:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 196,
                  "nodeType": "ExpressionStatement",
                  "src": "552:64:2"
                }
              ]
            },
            "functionSelector": "abaa9916",
            "id": 198,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "allocate",
            "nameLocation": "516:8:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 181,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "524:2:2"
            },
            "returnParameters": {
              "id": 182,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "542:0:2"
            },
            "scope": 252,
            "src": "507:116:2",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 219,
              "nodeType": "Block",
              "src": "687:104:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 208,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 204,
                            "name": "allocations",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 147,
                            "src": "705:11:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 206,
                          "indexExpression": {
                            "id": 205,
                            "name": "allocator",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 200,
                            "src": "717:9:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "705:22:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 207,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "730:1:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "705:26:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 203,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "697:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 209,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "697:35:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 210,
                  "nodeType": "ExpressionStatement",
                  "src": "697:35:2"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "baseExpression": {
                          "id": 214,
                          "name": "allocations",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 147,
                          "src": "761:11:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 216,
                        "indexExpression": {
                          "id": 215,
                          "name": "allocator",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 200,
                          "src": "773:9:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "761:22:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 211,
                        "name": "allocator",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 200,
                        "src": "742:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "id": 213,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "752:8:2",
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "src": "742:18:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 217,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "742:42:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 218,
                  "nodeType": "ExpressionStatement",
                  "src": "742:42:2"
                }
              ]
            },
            "functionSelector": "a2dea26f",
            "id": 220,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "sendAllocation",
            "nameLocation": "638:14:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 201,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 200,
                  "mutability": "mutable",
                  "name": "allocator",
                  "nameLocation": "669:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 220,
                  "src": "653:25:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 199,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "653:15:2",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "652:27:2"
            },
            "returnParameters": {
              "id": 202,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "687:0:2"
            },
            "scope": 252,
            "src": "629:162:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 238,
              "nodeType": "Block",
              "src": "844:68:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 233,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -28,
                              "src": "891:4:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Fallout_$252",
                                "typeString": "contract Fallout"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_Fallout_$252",
                                "typeString": "contract Fallout"
                              }
                            ],
                            "id": 232,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "883:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 231,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "883:7:2",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 234,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "883:13:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 235,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "897:7:2",
                        "memberName": "balance",
                        "nodeType": "MemberAccess",
                        "src": "883:21:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 227,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "862:3:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 228,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "866:6:2",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "862:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 226,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "854:8:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_payable_$",
                            "typeString": "type(address payable)"
                          },
                          "typeName": {
                            "id": 225,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "854:8:2",
                            "stateMutability": "payable",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 229,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "854:19:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "id": 230,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "874:8:2",
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "src": "854:28:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 236,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "854:51:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 237,
                  "nodeType": "ExpressionStatement",
                  "src": "854:51:2"
                }
              ]
            },
            "functionSelector": "8aa96f38",
            "id": 239,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 223,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 222,
                  "name": "onlyOwner",
                  "nameLocations": [
                    "834:9:2"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 180,
                  "src": "834:9:2"
                },
                "nodeType": "ModifierInvocation",
                "src": "834:9:2"
              }
            ],
            "name": "collectAllocations",
            "nameLocation": "806:18:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 221,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "824:2:2"
            },
            "returnParameters": {
              "id": 224,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "844:0:2"
            },
            "scope": 252,
            "src": "797:115:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 250,
              "nodeType": "Block",
              "src": "993:46:2",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "id": 246,
                      "name": "allocations",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 147,
                      "src": "1010:11:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      }
                    },
                    "id": 248,
                    "indexExpression": {
                      "id": 247,
                      "name": "allocator",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 241,
                      "src": "1022:9:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1010:22:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 245,
                  "id": 249,
                  "nodeType": "Return",
                  "src": "1003:29:2"
                }
              ]
            },
            "functionSelector": "ffd40b56",
            "id": 251,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "allocatorBalance",
            "nameLocation": "927:16:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 242,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 241,
                  "mutability": "mutable",
                  "name": "allocator",
                  "nameLocation": "952:9:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 251,
                  "src": "944:17:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 240,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "944:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "943:19:2"
            },
            "returnParameters": {
              "id": 245,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 244,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 251,
                  "src": "984:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 243,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "984:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "983:9:2"
            },
            "scope": 252,
            "src": "918:121:2",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 253,
        "src": "116:925:2",
        "usedErrors": []
      }
    ],
    "src": "32:1010:2"
  },
  "bytecode": "608060405234801561001057600080fd5b50610309806100206000396000f3fe6080604052600436106100555760003560e01c80636fab5ddf1461005a5780638aa96f38146100875780638da5cb5b1461009c578063a2dea26f146100d9578063abaa9916146100f9578063ffd40b5614610101575b600080fd5b610085600180546001600160a01b031916339081179091556000908152602081905260409020349055565b005b34801561009357600080fd5b50610085610145565b3480156100a857600080fd5b506001546100bc906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100e557600080fd5b506100856100f436600461028e565b6101d2565b610085610238565b34801561010d57600080fd5b5061013761011c36600461028e565b6001600160a01b031660009081526020819052604090205490565b6040519081526020016100d0565b6001546001600160a01b031633146101a35760405162461bcd60e51b815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e6572000000000000000000604482015260640160405180910390fd5b60405133904780156108fc02916000818181858888f193505050501580156101cf573d6000803e3d6000fd5b50565b6001600160a01b0381166000908152602081905260409020546101f457600080fd5b6001600160a01b03811660008181526020819052604080822054905181156108fc0292818181858888f19350505050158015610234573d6000803e3d6000fd5b5050565b336000908152602081905260409020546102529034610264565b33600090815260208190526040902055565b600061027082846102b2565b90505b92915050565b6001600160a01b03811681146101cf57600080fd5b6000602082840312156102a057600080fd5b81356102ab81610279565b9392505050565b8082018082111561027357634e487b7160e01b600052601160045260246000fdfea2646970667358221220703e223576126b4346e97ecdafbf6cae9e7f5dab3e180dfd1b7da65a87db38af64736f6c63430008110033",
  "bytecodeSha1": "8e6fccdab0944fa5ddd90ef1dda801d0331e7e57",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.17+commit.8df45f5f"
  },
  "contractName": "Fallout",
  "coverageMap": {
    "branches": {
      "0": {},
      "2": {}
    },
    "statements": {
      "0": {
        "SafeMath.add": {
          "7": [
            2818,
            2830
          ]
        }
      },
      "2": {
        "Fallout.Fal1out": {
          "0": [
            317,
            344
          ],
          "1": [
            354,
            384
          ]
        },
        "Fallout.allocate": {
          "6": [
            552,
            616
          ]
        },
        "Fallout.allocatorBalance": {
          "2": [
            1003,
            1032
          ]
        },
        "Fallout.collectAllocations": {
          "3": [
            854,
            905
          ]
        },
        "Fallout.sendAllocation": {
          "4": [
            697,
            732
          ],
          "5": [
            742,
            784
          ]
        }
      }
    }
  },
  "dependencies": [
    "OpenZeppelin/openzeppelin-contracts@4.5.0/SafeMath"
  ],
  "deployedBytecode": "6080604052600436106100555760003560e01c80636fab5ddf1461005a5780638aa96f38146100875780638da5cb5b1461009c578063a2dea26f146100d9578063abaa9916146100f9578063ffd40b5614610101575b600080fd5b610085600180546001600160a01b031916339081179091556000908152602081905260409020349055565b005b34801561009357600080fd5b50610085610145565b3480156100a857600080fd5b506001546100bc906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100e557600080fd5b506100856100f436600461028e565b6101d2565b610085610238565b34801561010d57600080fd5b5061013761011c36600461028e565b6001600160a01b031660009081526020819052604090205490565b6040519081526020016100d0565b6001546001600160a01b031633146101a35760405162461bcd60e51b815260206004820152601760248201527f63616c6c6572206973206e6f7420746865206f776e6572000000000000000000604482015260640160405180910390fd5b60405133904780156108fc02916000818181858888f193505050501580156101cf573d6000803e3d6000fd5b50565b6001600160a01b0381166000908152602081905260409020546101f457600080fd5b6001600160a01b03811660008181526020819052604080822054905181156108fc0292818181858888f19350505050158015610234573d6000803e3d6000fd5b5050565b336000908152602081905260409020546102529034610264565b33600090815260208190526040902055565b600061027082846102b2565b90505b92915050565b6001600160a01b03811681146101cf57600080fd5b6000602082840312156102a057600080fd5b81356102ab81610279565b9392505050565b8082018082111561027357634e487b7160e01b600052601160045260246000fdfea2646970667358221220703e223576126b4346e97ecdafbf6cae9e7f5dab3e180dfd1b7da65a87db38af64736f6c63430008110033",
  "deployedSourceMap": "116:925:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;273:118;;317:5;:27;;-1:-1:-1;;;;;;317:27:2;333:10;317:27;;;;;;:5;354:18;;;;;;;;;;375:9;354:30;;273:118;;;797:115;;;;;;;;;;;;;:::i;216:28::-;;;;;;;;;;-1:-1:-1;216:28:2;;;;-1:-1:-1;;;;;216:28:2;;;;;;-1:-1:-1;;;;;194:32:3;;;176:51;;164:2;149:18;216:28:2;;;;;;;;629:162;;;;;;;;;;-1:-1:-1;629:162:2;;;;;:::i;:::-;;:::i;507:116::-;;;:::i;918:121::-;;;;;;;;;;-1:-1:-1;918:121:2;;;;;:::i;:::-;-1:-1:-1;;;;;1010:22:2;984:7;1010:22;;;;;;;;;;;;918:121;;;;1056:25:3;;;1044:2;1029:18;918:121:2;910:177:3;797:115:2;450:5;;-1:-1:-1;;;;;450:5:2;436:10;:19;428:55;;;;-1:-1:-1;;;428:55:2;;1294:2:3;428:55:2;;;1276:21:3;1333:2;1313:18;;;1306:30;1372:25;1352:18;;;1345:53;1415:18;;428:55:2;;;;;;;;854:51:::1;::::0;862:10:::1;::::0;883:21:::1;854:51:::0;::::1;;;::::0;::::1;::::0;;;883:21;862:10;854:51;::::1;;;;;;;;;;;;;::::0;::::1;;;;;;797:115::o:0;629:162::-;-1:-1:-1;;;;;705:22:2;;730:1;705:22;;;;;;;;;;;697:35;;;;;;-1:-1:-1;;;;;742:18:2;;761:11;:22;;;;;;;;;;;;742:42;;;;;;;;761:11;742:42;761:22;742:18;:42;;;;;;;;;;;;;;;;;;;;;629:162;:::o;507:116::-;590:10;578:11;:23;;;;;;;;;;;:38;;606:9;578:27;:38::i;:::-;564:10;552:11;:23;;;;;;;;;;:64;507:116::o;2741:96:0:-;2799:7;2825:5;2829:1;2825;:5;:::i;:::-;2818:12;;2741:96;;;;;:::o;238:139:3:-;-1:-1:-1;;;;;321:31:3;;311:42;;301:70;;367:1;364;357:12;382:263;449:6;502:2;490:9;481:7;477:23;473:32;470:52;;;518:1;515;508:12;470:52;557:9;544:23;576:39;609:5;576:39;:::i;:::-;634:5;382:263;-1:-1:-1;;;382:263:3:o;1444:222::-;1509:9;;;1530:10;;;1527:133;;;1582:10;1577:3;1573:20;1570:1;1563:31;1617:4;1614:1;1607:15;1645:4;1642:1;1635:15",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    116,
    1041
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x55 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6FAB5DDF EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x8AA96F38 EQ PUSH2 0x87 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x9C JUMPI DUP1 PUSH4 0xA2DEA26F EQ PUSH2 0xD9 JUMPI DUP1 PUSH4 0xABAA9916 EQ PUSH2 0xF9 JUMPI DUP1 PUSH4 0xFFD40B56 EQ PUSH2 0x101 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x85 PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 CALLVALUE SWAP1 SSTORE JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x85 PUSH2 0x145 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0xBC SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x85 PUSH2 0xF4 CALLDATASIZE PUSH1 0x4 PUSH2 0x28E JUMP JUMPDEST PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0x85 PUSH2 0x238 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x137 PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x28E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xD0 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616C6C6572206973206E6F7420746865206F776E6572000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x1CF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SLOAD SWAP1 MLOAD DUP2 ISZERO PUSH2 0x8FC MUL SWAP3 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x234 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x252 SWAP1 CALLVALUE PUSH2 0x264 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x270 DUP3 DUP5 PUSH2 0x2B2 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2AB DUP2 PUSH2 0x279 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x273 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH17 0x3E223576126B4346E97ECDAFBF6CAE9E7F 0x5D 0xAB RETURNDATACOPY XOR 0xD REVERT SHL PUSH30 0xA65A87DB38AF64736F6C6343000811003300000000000000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        116,
        1041
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "5": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "8": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "LT",
      "path": "2"
    },
    "9": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x55"
    },
    "12": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "13": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "CALLDATALOAD",
      "path": "2"
    },
    "16": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0xE0"
    },
    "18": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "SHR",
      "path": "2"
    },
    "19": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "DUP1",
      "path": "2"
    },
    "20": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x6FAB5DDF"
    },
    "25": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "EQ",
      "path": "2"
    },
    "26": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x5A"
    },
    "29": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "30": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "DUP1",
      "path": "2"
    },
    "31": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x8AA96F38"
    },
    "36": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "EQ",
      "path": "2"
    },
    "37": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x87"
    },
    "40": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "41": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "DUP1",
      "path": "2"
    },
    "42": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0x8DA5CB5B"
    },
    "47": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "EQ",
      "path": "2"
    },
    "48": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x9C"
    },
    "51": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "52": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "DUP1",
      "path": "2"
    },
    "53": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xA2DEA26F"
    },
    "58": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "EQ",
      "path": "2"
    },
    "59": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xD9"
    },
    "62": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "63": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "DUP1",
      "path": "2"
    },
    "64": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xABAA9916"
    },
    "69": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "EQ",
      "path": "2"
    },
    "70": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF9"
    },
    "73": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "74": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "DUP1",
      "path": "2"
    },
    "75": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "PUSH4",
      "path": "2",
      "value": "0xFFD40B56"
    },
    "80": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "EQ",
      "path": "2"
    },
    "81": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x101"
    },
    "84": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "85": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "86": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "88": {
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "DUP1",
      "path": "2"
    },
    "89": {
      "first_revert": true,
      "fn": null,
      "offset": [
        116,
        1041
      ],
      "op": "REVERT",
      "path": "2"
    },
    "90": {
      "fn": "Fallout.Fal1out",
      "offset": [
        273,
        391
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "91": {
      "fn": "Fallout.Fal1out",
      "offset": [
        273,
        391
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x85"
    },
    "94": {
      "fn": "Fallout.Fal1out",
      "offset": [
        317,
        322
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 0,
      "value": "0x1"
    },
    "96": {
      "fn": "Fallout.Fal1out",
      "offset": [
        317,
        344
      ],
      "op": "DUP1",
      "path": "2"
    },
    "97": {
      "fn": "Fallout.Fal1out",
      "offset": [
        317,
        344
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "98": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "100": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "102": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "104": {
      "op": "SHL"
    },
    "105": {
      "op": "SUB"
    },
    "106": {
      "op": "NOT"
    },
    "107": {
      "fn": "Fallout.Fal1out",
      "offset": [
        317,
        344
      ],
      "op": "AND",
      "path": "2"
    },
    "108": {
      "fn": "Fallout.Fal1out",
      "offset": [
        333,
        343
      ],
      "op": "CALLER",
      "path": "2"
    },
    "109": {
      "fn": "Fallout.Fal1out",
      "offset": [
        317,
        344
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "110": {
      "fn": "Fallout.Fal1out",
      "offset": [
        317,
        344
      ],
      "op": "DUP2",
      "path": "2"
    },
    "111": {
      "fn": "Fallout.Fal1out",
      "offset": [
        317,
        344
      ],
      "op": "OR",
      "path": "2"
    },
    "112": {
      "fn": "Fallout.Fal1out",
      "offset": [
        317,
        344
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "113": {
      "fn": "Fallout.Fal1out",
      "offset": [
        317,
        344
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "114": {
      "fn": "Fallout.Fal1out",
      "offset": [
        317,
        344
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "115": {
      "fn": "Fallout.Fal1out",
      "offset": [
        317,
        322
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "117": {
      "fn": "Fallout.Fal1out",
      "offset": [
        354,
        372
      ],
      "op": "SWAP1",
      "path": "2",
      "statement": 1
    },
    "118": {
      "fn": "Fallout.Fal1out",
      "offset": [
        354,
        372
      ],
      "op": "DUP2",
      "path": "2"
    },
    "119": {
      "fn": "Fallout.Fal1out",
      "offset": [
        354,
        372
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "120": {
      "fn": "Fallout.Fal1out",
      "offset": [
        354,
        372
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "122": {
      "fn": "Fallout.Fal1out",
      "offset": [
        354,
        372
      ],
      "op": "DUP2",
      "path": "2"
    },
    "123": {
      "fn": "Fallout.Fal1out",
      "offset": [
        354,
        372
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "124": {
      "fn": "Fallout.Fal1out",
      "offset": [
        354,
        372
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "125": {
      "fn": "Fallout.Fal1out",
      "offset": [
        354,
        372
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "127": {
      "fn": "Fallout.Fal1out",
      "offset": [
        354,
        372
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "128": {
      "fn": "Fallout.Fal1out",
      "offset": [
        354,
        372
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "129": {
      "fn": "Fallout.Fal1out",
      "offset": [
        375,
        384
      ],
      "op": "CALLVALUE",
      "path": "2"
    },
    "130": {
      "fn": "Fallout.Fal1out",
      "offset": [
        354,
        384
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "131": {
      "fn": "Fallout.Fal1out",
      "offset": [
        354,
        384
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "132": {
      "fn": "Fallout.Fal1out",
      "offset": [
        273,
        391
      ],
      "op": "JUMP",
      "path": "2"
    },
    "133": {
      "fn": "Fallout.Fal1out",
      "offset": [
        273,
        391
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "134": {
      "fn": "Fallout.Fal1out",
      "offset": [
        273,
        391
      ],
      "op": "STOP",
      "path": "2"
    },
    "135": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        797,
        912
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "136": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        797,
        912
      ],
      "op": "CALLVALUE",
      "path": "2"
    },
    "137": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        797,
        912
      ],
      "op": "DUP1",
      "path": "2"
    },
    "138": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        797,
        912
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "139": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        797,
        912
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x93"
    },
    "142": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        797,
        912
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "143": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        797,
        912
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "145": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        797,
        912
      ],
      "op": "DUP1",
      "path": "2"
    },
    "146": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        797,
        912
      ],
      "op": "REVERT",
      "path": "2"
    },
    "147": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        797,
        912
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "148": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        797,
        912
      ],
      "op": "POP",
      "path": "2"
    },
    "149": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        797,
        912
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x85"
    },
    "152": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        797,
        912
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x145"
    },
    "155": {
      "fn": "Fallout.collectAllocations",
      "jump": "i",
      "offset": [
        797,
        912
      ],
      "op": "JUMP",
      "path": "2"
    },
    "156": {
      "offset": [
        216,
        244
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "157": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        216,
        244
      ],
      "op": "CALLVALUE",
      "path": "2"
    },
    "158": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        216,
        244
      ],
      "op": "DUP1",
      "path": "2"
    },
    "159": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        216,
        244
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "160": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        216,
        244
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xA8"
    },
    "163": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        216,
        244
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "164": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        216,
        244
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "166": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        216,
        244
      ],
      "op": "DUP1",
      "path": "2"
    },
    "167": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        216,
        244
      ],
      "op": "REVERT",
      "path": "2"
    },
    "168": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        216,
        244
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "169": {
      "op": "POP"
    },
    "170": {
      "offset": [
        216,
        244
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "172": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        216,
        244
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "173": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        216,
        244
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xBC"
    },
    "176": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        216,
        244
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "177": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "179": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "181": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "183": {
      "op": "SHL"
    },
    "184": {
      "op": "SUB"
    },
    "185": {
      "offset": [
        216,
        244
      ],
      "op": "AND",
      "path": "2"
    },
    "186": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        216,
        244
      ],
      "op": "DUP2",
      "path": "2"
    },
    "187": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        216,
        244
      ],
      "op": "JUMP",
      "path": "2"
    },
    "188": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        216,
        244
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "189": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        216,
        244
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "191": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        216,
        244
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "192": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "194": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "196": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "198": {
      "op": "SHL"
    },
    "199": {
      "op": "SUB"
    },
    "200": {
      "op": "SWAP1"
    },
    "201": {
      "op": "SWAP2"
    },
    "202": {
      "op": "AND"
    },
    "203": {
      "op": "DUP2"
    },
    "204": {
      "op": "MSTORE"
    },
    "205": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "207": {
      "op": "ADD"
    },
    "208": {
      "offset": [
        216,
        244
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "209": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        216,
        244
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "211": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        216,
        244
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "212": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        216,
        244
      ],
      "op": "DUP1",
      "path": "2"
    },
    "213": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        216,
        244
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "214": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        216,
        244
      ],
      "op": "SUB",
      "path": "2"
    },
    "215": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        216,
        244
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "216": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        216,
        244
      ],
      "op": "RETURN",
      "path": "2"
    },
    "217": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        629,
        791
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "218": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        629,
        791
      ],
      "op": "CALLVALUE",
      "path": "2"
    },
    "219": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        629,
        791
      ],
      "op": "DUP1",
      "path": "2"
    },
    "220": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        629,
        791
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "221": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        629,
        791
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xE5"
    },
    "224": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        629,
        791
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "225": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        629,
        791
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "227": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        629,
        791
      ],
      "op": "DUP1",
      "path": "2"
    },
    "228": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        629,
        791
      ],
      "op": "REVERT",
      "path": "2"
    },
    "229": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        629,
        791
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "230": {
      "op": "POP"
    },
    "231": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        629,
        791
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x85"
    },
    "234": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        629,
        791
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xF4"
    },
    "237": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        629,
        791
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "238": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        629,
        791
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "240": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        629,
        791
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x28E"
    },
    "243": {
      "fn": "Fallout.sendAllocation",
      "jump": "i",
      "offset": [
        629,
        791
      ],
      "op": "JUMP",
      "path": "2"
    },
    "244": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        629,
        791
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "245": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        629,
        791
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1D2"
    },
    "248": {
      "fn": "Fallout.sendAllocation",
      "jump": "i",
      "offset": [
        629,
        791
      ],
      "op": "JUMP",
      "path": "2"
    },
    "249": {
      "fn": "Fallout.allocate",
      "offset": [
        507,
        623
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "250": {
      "fn": "Fallout.allocate",
      "offset": [
        507,
        623
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x85"
    },
    "253": {
      "fn": "Fallout.allocate",
      "offset": [
        507,
        623
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x238"
    },
    "256": {
      "fn": "Fallout.allocate",
      "jump": "i",
      "offset": [
        507,
        623
      ],
      "op": "JUMP",
      "path": "2"
    },
    "257": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        918,
        1039
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "258": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        918,
        1039
      ],
      "op": "CALLVALUE",
      "path": "2"
    },
    "259": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        918,
        1039
      ],
      "op": "DUP1",
      "path": "2"
    },
    "260": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        918,
        1039
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "261": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        918,
        1039
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x10D"
    },
    "264": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        918,
        1039
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "265": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        918,
        1039
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "267": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        918,
        1039
      ],
      "op": "DUP1",
      "path": "2"
    },
    "268": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        918,
        1039
      ],
      "op": "REVERT",
      "path": "2"
    },
    "269": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        918,
        1039
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "270": {
      "op": "POP"
    },
    "271": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        918,
        1039
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x137"
    },
    "274": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        918,
        1039
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x11C"
    },
    "277": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        918,
        1039
      ],
      "op": "CALLDATASIZE",
      "path": "2"
    },
    "278": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        918,
        1039
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "280": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        918,
        1039
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x28E"
    },
    "283": {
      "fn": "Fallout.allocatorBalance",
      "jump": "i",
      "offset": [
        918,
        1039
      ],
      "op": "JUMP",
      "path": "2"
    },
    "284": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        918,
        1039
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "285": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "287": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "289": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "291": {
      "op": "SHL"
    },
    "292": {
      "op": "SUB"
    },
    "293": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        1010,
        1032
      ],
      "op": "AND",
      "path": "2",
      "statement": 2
    },
    "294": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        984,
        991
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "296": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        1010,
        1032
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "297": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        1010,
        1032
      ],
      "op": "DUP2",
      "path": "2"
    },
    "298": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        1010,
        1032
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "299": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        1010,
        1032
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "301": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        1010,
        1032
      ],
      "op": "DUP2",
      "path": "2"
    },
    "302": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        1010,
        1032
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "303": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        1010,
        1032
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "304": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        1010,
        1032
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "306": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        1010,
        1032
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "307": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        1010,
        1032
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "308": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        1010,
        1032
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "309": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        1010,
        1032
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "310": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        918,
        1039
      ],
      "op": "JUMP",
      "path": "2"
    },
    "311": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        918,
        1039
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "312": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        918,
        1039
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "314": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        918,
        1039
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "315": {
      "op": "SWAP1"
    },
    "316": {
      "op": "DUP2"
    },
    "317": {
      "op": "MSTORE"
    },
    "318": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "320": {
      "op": "ADD"
    },
    "321": {
      "fn": "Fallout.allocatorBalance",
      "offset": [
        918,
        1039
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0xD0"
    },
    "324": {
      "op": "JUMP"
    },
    "325": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        797,
        912
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "326": {
      "offset": [
        450,
        455
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x1"
    },
    "328": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        450,
        455
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "329": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "331": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "333": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "335": {
      "op": "SHL"
    },
    "336": {
      "op": "SUB"
    },
    "337": {
      "offset": [
        450,
        455
      ],
      "op": "AND",
      "path": "2"
    },
    "338": {
      "offset": [
        436,
        446
      ],
      "op": "CALLER",
      "path": "2"
    },
    "339": {
      "offset": [
        436,
        455
      ],
      "op": "EQ",
      "path": "2"
    },
    "340": {
      "offset": [
        428,
        483
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1A3"
    },
    "343": {
      "offset": [
        428,
        483
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "344": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        428,
        483
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "346": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        428,
        483
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "347": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "351": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "353": {
      "op": "SHL"
    },
    "354": {
      "offset": [
        428,
        483
      ],
      "op": "DUP2",
      "path": "2"
    },
    "355": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        428,
        483
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "356": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "358": {
      "offset": [
        428,
        483
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x4"
    },
    "360": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        428,
        483
      ],
      "op": "DUP3",
      "path": "2"
    },
    "361": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        428,
        483
      ],
      "op": "ADD",
      "path": "2"
    },
    "362": {
      "op": "MSTORE"
    },
    "363": {
      "op": "PUSH1",
      "value": "0x17"
    },
    "365": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "367": {
      "op": "DUP3"
    },
    "368": {
      "op": "ADD"
    },
    "369": {
      "op": "MSTORE"
    },
    "370": {
      "op": "PUSH32",
      "value": "0x63616C6C6572206973206E6F7420746865206F776E6572000000000000000000"
    },
    "403": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "405": {
      "op": "DUP3"
    },
    "406": {
      "op": "ADD"
    },
    "407": {
      "op": "MSTORE"
    },
    "408": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "410": {
      "op": "ADD"
    },
    "411": {
      "offset": [
        428,
        483
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "413": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        428,
        483
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "414": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        428,
        483
      ],
      "op": "DUP1",
      "path": "2"
    },
    "415": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        428,
        483
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "416": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        428,
        483
      ],
      "op": "SUB",
      "path": "2"
    },
    "417": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        428,
        483
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "418": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        428,
        483
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "2"
    },
    "419": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        428,
        483
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "420": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "PUSH1",
      "path": "2",
      "statement": 3,
      "value": "0x40"
    },
    "422": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "423": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        862,
        872
      ],
      "op": "CALLER",
      "path": "2"
    },
    "424": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        862,
        872
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "425": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        883,
        904
      ],
      "op": "SELFBALANCE",
      "path": "2"
    },
    "426": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "DUP1",
      "path": "2"
    },
    "427": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "428": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8FC"
    },
    "431": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "MUL",
      "path": "2"
    },
    "432": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "SWAP2",
      "path": "2"
    },
    "433": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "435": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "DUP2",
      "path": "2"
    },
    "436": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "DUP2",
      "path": "2"
    },
    "437": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "DUP2",
      "path": "2"
    },
    "438": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        883,
        904
      ],
      "op": "DUP6",
      "path": "2"
    },
    "439": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        862,
        872
      ],
      "op": "DUP9",
      "path": "2"
    },
    "440": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "DUP9",
      "path": "2"
    },
    "441": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "CALL",
      "path": "2"
    },
    "442": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "443": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "POP",
      "path": "2"
    },
    "444": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "POP",
      "path": "2"
    },
    "445": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "POP",
      "path": "2"
    },
    "446": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "POP",
      "path": "2"
    },
    "447": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "448": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "DUP1",
      "path": "2"
    },
    "449": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "450": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1CF"
    },
    "453": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "454": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "455": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "457": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "DUP1",
      "path": "2"
    },
    "458": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "RETURNDATACOPY",
      "path": "2"
    },
    "459": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "460": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "462": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "REVERT",
      "path": "2"
    },
    "463": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "464": {
      "fn": "Fallout.collectAllocations",
      "offset": [
        854,
        905
      ],
      "op": "POP",
      "path": "2"
    },
    "465": {
      "fn": "Fallout.collectAllocations",
      "jump": "o",
      "offset": [
        797,
        912
      ],
      "op": "JUMP",
      "path": "2"
    },
    "466": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        629,
        791
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "467": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "469": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "471": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "473": {
      "op": "SHL"
    },
    "474": {
      "op": "SUB"
    },
    "475": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        705,
        727
      ],
      "op": "DUP2",
      "path": "2",
      "statement": 4
    },
    "476": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        705,
        727
      ],
      "op": "AND",
      "path": "2"
    },
    "477": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        730,
        731
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "479": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        705,
        727
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "480": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        705,
        727
      ],
      "op": "DUP2",
      "path": "2"
    },
    "481": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        705,
        727
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "482": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        705,
        727
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "484": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        705,
        727
      ],
      "op": "DUP2",
      "path": "2"
    },
    "485": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        705,
        727
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "486": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        705,
        727
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "487": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        705,
        727
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "489": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        705,
        727
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "490": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        705,
        727
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "491": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        705,
        727
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "492": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        697,
        732
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x1F4"
    },
    "495": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        697,
        732
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "496": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        697,
        732
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "498": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        697,
        732
      ],
      "op": "DUP1",
      "path": "2"
    },
    "499": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        697,
        732
      ],
      "op": "REVERT",
      "path": "2"
    },
    "500": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        697,
        732
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "501": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "503": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "505": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "507": {
      "op": "SHL"
    },
    "508": {
      "op": "SUB"
    },
    "509": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        760
      ],
      "op": "DUP2",
      "path": "2",
      "statement": 5
    },
    "510": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        760
      ],
      "op": "AND",
      "path": "2"
    },
    "511": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        761,
        772
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "513": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        761,
        783
      ],
      "op": "DUP2",
      "path": "2"
    },
    "514": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        761,
        783
      ],
      "op": "DUP2",
      "path": "2"
    },
    "515": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        761,
        783
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "516": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        761,
        783
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "518": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        761,
        783
      ],
      "op": "DUP2",
      "path": "2"
    },
    "519": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        761,
        783
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "520": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        761,
        783
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "521": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        761,
        783
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "523": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        761,
        783
      ],
      "op": "DUP1",
      "path": "2"
    },
    "524": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        761,
        783
      ],
      "op": "DUP3",
      "path": "2"
    },
    "525": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        761,
        783
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "526": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        761,
        783
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "527": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "528": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "MLOAD",
      "path": "2"
    },
    "529": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "DUP2",
      "path": "2"
    },
    "530": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "531": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x8FC"
    },
    "534": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "MUL",
      "path": "2"
    },
    "535": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "SWAP3",
      "path": "2"
    },
    "536": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "DUP2",
      "path": "2"
    },
    "537": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        761,
        772
      ],
      "op": "DUP2",
      "path": "2"
    },
    "538": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "DUP2",
      "path": "2"
    },
    "539": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        761,
        783
      ],
      "op": "DUP6",
      "path": "2"
    },
    "540": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        760
      ],
      "op": "DUP9",
      "path": "2"
    },
    "541": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "DUP9",
      "path": "2"
    },
    "542": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "CALL",
      "path": "2"
    },
    "543": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "SWAP4",
      "path": "2"
    },
    "544": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "POP",
      "path": "2"
    },
    "545": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "POP",
      "path": "2"
    },
    "546": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "POP",
      "path": "2"
    },
    "547": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "POP",
      "path": "2"
    },
    "548": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "549": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "DUP1",
      "path": "2"
    },
    "550": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "ISZERO",
      "path": "2"
    },
    "551": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x234"
    },
    "554": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "JUMPI",
      "path": "2"
    },
    "555": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "556": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "558": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "DUP1",
      "path": "2"
    },
    "559": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "RETURNDATACOPY",
      "path": "2"
    },
    "560": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "RETURNDATASIZE",
      "path": "2"
    },
    "561": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "563": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "REVERT",
      "path": "2"
    },
    "564": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "565": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        742,
        784
      ],
      "op": "POP",
      "path": "2"
    },
    "566": {
      "fn": "Fallout.sendAllocation",
      "offset": [
        629,
        791
      ],
      "op": "POP",
      "path": "2"
    },
    "567": {
      "fn": "Fallout.sendAllocation",
      "jump": "o",
      "offset": [
        629,
        791
      ],
      "op": "JUMP",
      "path": "2"
    },
    "568": {
      "fn": "Fallout.allocate",
      "offset": [
        507,
        623
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "569": {
      "fn": "Fallout.allocate",
      "offset": [
        590,
        600
      ],
      "op": "CALLER",
      "path": "2",
      "statement": 6
    },
    "570": {
      "fn": "Fallout.allocate",
      "offset": [
        578,
        589
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "572": {
      "fn": "Fallout.allocate",
      "offset": [
        578,
        601
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "573": {
      "fn": "Fallout.allocate",
      "offset": [
        578,
        601
      ],
      "op": "DUP2",
      "path": "2"
    },
    "574": {
      "fn": "Fallout.allocate",
      "offset": [
        578,
        601
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "575": {
      "fn": "Fallout.allocate",
      "offset": [
        578,
        601
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "577": {
      "fn": "Fallout.allocate",
      "offset": [
        578,
        601
      ],
      "op": "DUP2",
      "path": "2"
    },
    "578": {
      "fn": "Fallout.allocate",
      "offset": [
        578,
        601
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "579": {
      "fn": "Fallout.allocate",
      "offset": [
        578,
        601
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "580": {
      "fn": "Fallout.allocate",
      "offset": [
        578,
        601
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "582": {
      "fn": "Fallout.allocate",
      "offset": [
        578,
        601
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "583": {
      "fn": "Fallout.allocate",
      "offset": [
        578,
        601
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "584": {
      "fn": "Fallout.allocate",
      "offset": [
        578,
        601
      ],
      "op": "SLOAD",
      "path": "2"
    },
    "585": {
      "fn": "Fallout.allocate",
      "offset": [
        578,
        616
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x252"
    },
    "588": {
      "fn": "Fallout.allocate",
      "offset": [
        578,
        616
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "589": {
      "fn": "Fallout.allocate",
      "offset": [
        606,
        615
      ],
      "op": "CALLVALUE",
      "path": "2"
    },
    "590": {
      "fn": "Fallout.allocate",
      "offset": [
        578,
        605
      ],
      "op": "PUSH2",
      "path": "2",
      "value": "0x264"
    },
    "593": {
      "fn": "Fallout.allocate",
      "jump": "i",
      "offset": [
        578,
        616
      ],
      "op": "JUMP",
      "path": "2"
    },
    "594": {
      "fn": "Fallout.allocate",
      "offset": [
        578,
        616
      ],
      "op": "JUMPDEST",
      "path": "2"
    },
    "595": {
      "fn": "Fallout.allocate",
      "offset": [
        564,
        574
      ],
      "op": "CALLER",
      "path": "2"
    },
    "596": {
      "fn": "Fallout.allocate",
      "offset": [
        552,
        563
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x0"
    },
    "598": {
      "fn": "Fallout.allocate",
      "offset": [
        552,
        575
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "599": {
      "fn": "Fallout.allocate",
      "offset": [
        552,
        575
      ],
      "op": "DUP2",
      "path": "2"
    },
    "600": {
      "fn": "Fallout.allocate",
      "offset": [
        552,
        575
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "601": {
      "fn": "Fallout.allocate",
      "offset": [
        552,
        575
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x20"
    },
    "603": {
      "fn": "Fallout.allocate",
      "offset": [
        552,
        575
      ],
      "op": "DUP2",
      "path": "2"
    },
    "604": {
      "fn": "Fallout.allocate",
      "offset": [
        552,
        575
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "605": {
      "fn": "Fallout.allocate",
      "offset": [
        552,
        575
      ],
      "op": "MSTORE",
      "path": "2"
    },
    "606": {
      "fn": "Fallout.allocate",
      "offset": [
        552,
        575
      ],
      "op": "PUSH1",
      "path": "2",
      "value": "0x40"
    },
    "608": {
      "fn": "Fallout.allocate",
      "offset": [
        552,
        575
      ],
      "op": "SWAP1",
      "path": "2"
    },
    "609": {
      "fn": "Fallout.allocate",
      "offset": [
        552,
        575
      ],
      "op": "KECCAK256",
      "path": "2"
    },
    "610": {
      "fn": "Fallout.allocate",
      "offset": [
        552,
        616
      ],
      "op": "SSTORE",
      "path": "2"
    },
    "611": {
      "fn": "Fallout.allocate",
      "jump": "o",
      "offset": [
        507,
        623
      ],
      "op": "JUMP",
      "path": "2"
    },
    "612": {
      "fn": "SafeMath.add",
      "offset": [
        2741,
        2837
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "613": {
      "fn": "SafeMath.add",
      "offset": [
        2799,
        2806
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "615": {
      "fn": "SafeMath.add",
      "offset": [
        2825,
        2830
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 7,
      "value": "0x270"
    },
    "618": {
      "fn": "SafeMath.add",
      "offset": [
        2829,
        2830
      ],
      "op": "DUP3",
      "path": "0"
    },
    "619": {
      "fn": "SafeMath.add",
      "offset": [
        2825,
        2826
      ],
      "op": "DUP5",
      "path": "0"
    },
    "620": {
      "fn": "SafeMath.add",
      "offset": [
        2825,
        2830
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2B2"
    },
    "623": {
      "fn": "SafeMath.add",
      "jump": "i",
      "offset": [
        2825,
        2830
      ],
      "op": "JUMP",
      "path": "0"
    },
    "624": {
      "fn": "SafeMath.add",
      "offset": [
        2825,
        2830
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "625": {
      "fn": "SafeMath.add",
      "offset": [
        2818,
        2830
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "626": {
      "fn": "SafeMath.add",
      "offset": [
        2818,
        2830
      ],
      "op": "POP",
      "path": "0"
    },
    "627": {
      "fn": "SafeMath.add",
      "offset": [
        2741,
        2837
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "628": {
      "fn": "SafeMath.add",
      "offset": [
        2741,
        2837
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "629": {
      "fn": "SafeMath.add",
      "offset": [
        2741,
        2837
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "630": {
      "fn": "SafeMath.add",
      "offset": [
        2741,
        2837
      ],
      "op": "POP",
      "path": "0"
    },
    "631": {
      "fn": "SafeMath.add",
      "offset": [
        2741,
        2837
      ],
      "op": "POP",
      "path": "0"
    },
    "632": {
      "fn": "SafeMath.add",
      "jump": "o",
      "offset": [
        2741,
        2837
      ],
      "op": "JUMP",
      "path": "0"
    },
    "633": {
      "op": "JUMPDEST"
    },
    "634": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "636": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "638": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "640": {
      "op": "SHL"
    },
    "641": {
      "op": "SUB"
    },
    "642": {
      "op": "DUP2"
    },
    "643": {
      "op": "AND"
    },
    "644": {
      "op": "DUP2"
    },
    "645": {
      "op": "EQ"
    },
    "646": {
      "op": "PUSH2",
      "value": "0x1CF"
    },
    "649": {
      "op": "JUMPI"
    },
    "650": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "652": {
      "op": "DUP1"
    },
    "653": {
      "op": "REVERT"
    },
    "654": {
      "op": "JUMPDEST"
    },
    "655": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "657": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "659": {
      "op": "DUP3"
    },
    "660": {
      "op": "DUP5"
    },
    "661": {
      "op": "SUB"
    },
    "662": {
      "op": "SLT"
    },
    "663": {
      "op": "ISZERO"
    },
    "664": {
      "op": "PUSH2",
      "value": "0x2A0"
    },
    "667": {
      "op": "JUMPI"
    },
    "668": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "670": {
      "op": "DUP1"
    },
    "671": {
      "op": "REVERT"
    },
    "672": {
      "op": "JUMPDEST"
    },
    "673": {
      "op": "DUP2"
    },
    "674": {
      "op": "CALLDATALOAD"
    },
    "675": {
      "op": "PUSH2",
      "value": "0x2AB"
    },
    "678": {
      "op": "DUP2"
    },
    "679": {
      "op": "PUSH2",
      "value": "0x279"
    },
    "682": {
      "jump": "i",
      "op": "JUMP"
    },
    "683": {
      "op": "JUMPDEST"
    },
    "684": {
      "op": "SWAP4"
    },
    "685": {
      "op": "SWAP3"
    },
    "686": {
      "op": "POP"
    },
    "687": {
      "op": "POP"
    },
    "688": {
      "op": "POP"
    },
    "689": {
      "jump": "o",
      "op": "JUMP"
    },
    "690": {
      "op": "JUMPDEST"
    },
    "691": {
      "op": "DUP1"
    },
    "692": {
      "op": "DUP3"
    },
    "693": {
      "op": "ADD"
    },
    "694": {
      "op": "DUP1"
    },
    "695": {
      "op": "DUP3"
    },
    "696": {
      "op": "GT"
    },
    "697": {
      "op": "ISZERO"
    },
    "698": {
      "op": "PUSH2",
      "value": "0x273"
    },
    "701": {
      "op": "JUMPI"
    },
    "702": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "707": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "709": {
      "op": "SHL"
    },
    "710": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "712": {
      "op": "MSTORE"
    },
    "713": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "715": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "717": {
      "op": "MSTORE"
    },
    "718": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "720": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "722": {
      "op": "REVERT"
    }
  },
  "sha1": "e4955becb50a2d3796b4f322a9b1d7265d4cbab3",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ncontract Fallout {\n    using SafeMath for uint256;\n    mapping(address => uint256) allocations;\n    address payable public owner;\n\n    /* constructor */\n    function Fal1out() public payable {\n        owner = payable(msg.sender);\n        allocations[owner] = msg.value;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"caller is not the owner\");\n        _;\n    }\n\n    function allocate() public payable {\n        allocations[msg.sender] = allocations[msg.sender].add(msg.value);\n    }\n\n    function sendAllocation(address payable allocator) public {\n        require(allocations[allocator] > 0);\n        allocator.transfer(allocations[allocator]);\n    }\n\n    function collectAllocations() public onlyOwner {\n        payable(msg.sender).transfer(address(this).balance);\n    }\n\n    function allocatorBalance(address allocator) public view returns (uint256) {\n        return allocations[allocator];\n    }\n}\n",
  "sourceMap": "116:925:2:-:0;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/ethernaut_fallout.sol",
  "type": "contract"
}